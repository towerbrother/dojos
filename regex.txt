Restrict Possible UsernamesPassed
You need to check all the usernames in a database. Here are some simple rules that users have to follow when creating their username.

1) Usernames can only use alpha-numeric characters.

2) The only numbers in the username have to be at the end. There can be zero or more of them at the end.

3) Username letters can be lowercase and uppercase.

4) Usernames have to be at least two characters long. A two-character username can only use alphabet letters as characters.


CODE BELOW:

let username = "JackOfAllTrades";
let userCheck = /^[a-z]([0-9]{2,}|[a-z]+\d*)$/i; // Change this line
let result = userCheck.test(username); //true

/* 
CODE EXPLANATION

^ - start of input
[a-z] - first character is a letter
[0-9]{2,0} - ends with two or more numbers
| - or
[a-z]+ - has one or more letters next
\d* - and ends with zero or more numbers
$ - end of input
i - ignore case of input

*/

======================================================================================================================

LOOKAHEAD (POSITIVE & NEGATIVE)

Use lookaheads in the pwRegex to match passwords that are greater than 5 characters long, do not begin with numbers, and have two consecutive digits.

CODE BELOW:

let sampleWord = "astronaut";
let pwRegex = /^(?=\w{6,})(?=\D*\d{2})/;
let result = pwRegex.test(sampleWord);

/* 
CODE EXPLANATION

Using curve brackets means that I code for one condition at the time?
^ - start of input
(?=\w{6,}) - passwords that are greater than 5 characters long
(?=\D* - do not begin with numbers
\d{2}) - have two consecutive digits

*/

===============================================================================================================================

Reuse Patterns Using Capture Groups

CODE BELOW:

Use capture groups in reRegex to match numbers that are repeated only three times in a string, each separated by a space.

let repeatNum = "42 42 42";
let reRegex = /^(\d+)\s\1\s\1$/;
let result = reRegex.test(repeatNum);

/* 
CODE EXPLANATION

*/
